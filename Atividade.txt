
Aluna: Juliana Paula

Resposta:

Coloquei aspas nos anos correspondente aos livros; como no banco de dados esse atributo está como int (número inteiro), ao colocar aspas ("") nele, causaria erro, pois as aspas são uma expressão do tipo varchar


Erro: 
java.lang.Error: Unresolved compilation problem: 
	The constructor Livro(String, String, String) is undefined

	at ee.LivrosJunity.testEditarLivro(LivrosJunity.java:46)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:63)
	at org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)
	at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:413)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:93)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:40)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:529)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:756)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:452)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:210)


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


package ee;

import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;
import org.junit.AfterClass;
public class LivrosJunity {

	private LivroDao livroDao;

	// Método executado antes de cada teste
	@Before
	public void setUp() {
	    livroDao = new LivroDao(); // Cria uma instância do LivroDao
	}

	// Teste de cadastro de livro
	@Test
	public void testCadastroLivro() {
	    // Cria um novo livro com título, autor e ano
	    Livro livro = new Livro("Livro 1", "Autor 1", "2021");

	    // Cadastra o livro no LivroDao e recebe o ID retornado
	    int id = livroDao.cadastrarLivro(livro);

	    // Busca o livro cadastrado pelo ID
	    Livro livroRecuperado = livroDao.buscarLivroPorId(id);

	    // Verifica se o livro recuperado não é nulo
	    assertNotNull(livroRecuperado);

	    // Verifica se o título do livro recuperado é "Livro 1"
	    assertEquals("Livro 1", livroRecuperado.getTitulo());

	    // Verifica se o autor do livro recuperado é "Autor 1"
	    assertEquals("Autor 1", livroRecuperado.getAutor());

	    // Verifica se o ano do livro recuperado é 2021
	    assertEquals(2021, livroRecuperado.getAno());
	}

	// Teste de edição de livro
	@Test
	public void testEditarLivro() {
	    // Cria um novo livro com título, autor e ano
	    Livro livro = new Livro("Livro 2", "Autor 2", "2022");

	    // Cadastra o livro no LivroDao e recebe o ID retornado
	    int id = livroDao.cadastrarLivro(livro);

	    // Busca o livro cadastrado pelo ID
	    Livro livroRecuperado = livroDao.buscarLivroPorId(id);

	    // Verifica se o livro recuperado não é nulo
	    assertNotNull(livroRecuperado);

	    // Altera o título, autor e ano do livro recuperado
	    livroRecuperado.setTitulo("Livro 2 (Editado)");
	    livroRecuperado.setAutor("Autor 2 (Editado)");
	    livroRecuperado.setAno(2023);

	    // Edita o livro no LivroDao
	    livroDao.editarLivro(livroRecuperado);

	    // Busca o livro novamente pelo ID
	    Livro livroAtualizado = livroDao.buscarLivroPorId(id);

	    // Verifica se o livro atualizado não é nulo
	    assertNotNull(livroAtualizado);

	    // Verifica se o título do livro atualizado é "Livro 2 (Editado)"
	    assertEquals("Livro 2 (Editado)", livroAtualizado.getTitulo());

	    // Verifica se o autor do livro atualizado é "Autor 2 (Editado)"
	    assertEquals("Autor 2 (Editado)", livroAtualizado.getAutor());

	    // Verifica se o ano do livro atualizado é 2023
	    assertEquals(2023, livroAtualizado.getAno());
	}

	// Teste de exclusão de livro
	@Test
	public void testExcluirLivro() {
	    // Cria um novo livro com título, autor e ano
	    Livro livro = new Livro("Livro 3", "Autor 3", "2023");

	    // Cadastra o livro no LivroDao e recebe o ID retornado
	    int id = livroDao.cadastrarLivro(livro);

	    // Busca o livro cadastrado pelo ID
	    Livro livroRecuperado = livroDao.buscarLivroPorId(id);

	    // Verifica se o livro recuperado não é nulo
	    assertNotNull(livroRecuperado);

	    // Exclui o livro pelo ID
	    livroDao.excluirLivro(id);

	    // Busca o livro novamente pelo ID
	    Livro livroExcluido = livroDao.buscarLivroPorId(id);

	    // Verifica se o livro excluído é nulo
	    assertNull(livroExcluido);
	}
	}